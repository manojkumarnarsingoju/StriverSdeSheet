/************************************************************

    Following is the TreeNode class structure

    template <typename T>
    class TreeNode {
       public:
        T data;w'p
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/
#include <bits/stdc++.h>

string serializeTree(TreeNode<int> *root)
{
  if (!root)
    return "";
  string str;
  queue<TreeNode<int> *> q;
  q.push(root);

  while (!q.empty()) {
    int n = q.size();
    while (n--) {
      auto p = q.front();
      q.pop();

      if (!p) {
        str += "#,";
        continue;
      }

      str += to_string(p->data) + ",";
      q.push(p->left);
      q.push(p->right);
    }
  }

  return str;
 //    Write your code here for serializing the tree

}

TreeNode<int>* deserializeTree(string &data)
{
  if(data.size()==0){
    return NULL;
  }
   stringstream s(data);
  string str;
  getline(s,str,',');
  TreeNode<int> *root = new TreeNode<int>(stoi(str));
  queue<TreeNode<int> *> q;
  q.push(root);
  while(!q.empty()){
    TreeNode<int> *node = q.front();
    q.pop();
    getline(s,str,',');
    if(str=="#"){
      node->left =NULL;
    }
    else {
      TreeNode<int> *leftnode = new TreeNode<int>(stoi(str));
      node->left = leftnode;
      q.push(leftnode);
    }
    getline(s,str,',');
    if(str=="#"){
      node->right = NULL;
    }
    else {
            TreeNode<int> *rightnode = new TreeNode<int>(stoi(str));
node->right = rightnode;
q.push(rightnode);
    }
  }
 //    Write your code here for deserializing the tree
return root;
}



